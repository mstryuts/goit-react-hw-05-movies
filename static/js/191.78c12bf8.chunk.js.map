{"version":3,"file":"static/js/191.78c12bf8.chunk.js","mappings":"gRAEaA,EAAeC,EAAAA,GAAAA,IAAH,0CAIZC,EAAYD,EAAAA,GAAAA,IAAH,2FAMTE,EAAKF,EAAAA,GAAAA,GAAH,0CAIFG,EAAKH,EAAAA,GAAAA,GAAH,0C,wCCmEf,EAnEqB,WAAO,IAAD,IACzB,GAA0BI,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MACXC,GAAUC,EAAAA,EAAAA,QAAM,OAACH,QAAD,IAACA,GAAD,UAACA,EAAUI,aAAX,aAAC,EAAiBC,OAExCC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAO,mCAAG,WAAMC,GAAN,iGAEOC,EAAAA,EAAAA,IAAaD,GAFpB,OAENE,EAFM,OAGZb,EAASa,GAHG,gDCtBQC,ED2BD,EAAD,GC1BxBC,IAAAA,OAAAA,QAAA,UAA2BD,EAAME,QAAjC,2BDqBkB,kCCtBpB,IAA4BF,CDsBR,uBAAH,sDAQbJ,EAAQT,EACT,GAAE,CAACA,IAEJ,IACEgB,EAMElB,EANFkB,YACAC,EAKEnB,EALFmB,eACAC,EAIEpB,EAJFoB,aACAC,EAGErB,EAHFqB,aACAC,EAEEtB,EAFFsB,SACAC,EACEvB,EADFuB,OAGF,GAAqB,IAAjBvB,EAAMwB,OAAV,CAEA,IAAMC,EAASP,EAAW,UAhCL,kCAgCK,YAAwBA,GAlClD,4FAoCA,OACE,iCACE,SAAC,KAAD,CAAMQ,GAAE,UAAEpB,EAAQqB,eAAV,QAAqB,QAA7B,sBACA,UAACjC,EAAD,WACG,KACD,gBAAKkC,IAAKH,EAAQI,IAAKV,KACvB,UAACvB,EAAD,WACG,KACD,0BACGuB,EADH,KACqBC,EAAaU,OAAO,EAAG,GAD5C,QAGA,oCAAYT,MACZ,sCACA,uBAAIC,KACJ,oCACA,SAACxB,EAAD,UACGyB,EAAOQ,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACb,OAAO,SAACnC,EAAD,UAAgBmC,GAAPA,EACjB,aAIP,2BACE,yBACE,SAAC,KAAD,CAAMN,GAAG,OAAT,qBAEF,yBACE,SAAC,KAAD,CAAMA,GAAG,UAAT,2BAGJ,SAAC,KAAD,MAlC0B,CAqC/B,C","sources":["components/MovieDetails.styled.js","components/MovieDetails.jsx","alerts.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const MovieWrapper = styled.div`\n  display: flex;\n`;\n\nexport const MovieInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-left: 10px;\n`;\n\nexport const Li = styled.li`\n  padding: 10px;\n`;\n\nexport const Ul = styled.ul`\n  display: flex;\n`;\n","import { useState, useEffect, useRef } from 'react';\n\nimport { Link, Outlet, useLocation } from 'react-router-dom';\n\nimport { MovieWrapper, MovieInfo, Li, Ul } from './MovieDetails.styled';\n\nimport { useParams } from 'react-router-dom';\nimport { getMovieById } from 'api/api';\n\nimport { ifSomeProblemAlert } from '../alerts';\n\nconst NO_IMAGE =\n  'https://t3.ftcdn.net/jpg/05/01/98/72/360_F_501987255_kb5LZcBmlcz00IejLlxpklpTbJ9ys5i8.jpg';\n\nconst IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/w300';\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState([]);\n\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backRef = useRef(location?.state?.from);\n\n  useEffect(() => {\n    const getData = async id => {\n      try {\n        const data = await getMovieById(id);\n        setMovie(data);\n      } catch (error) {\n        ifSomeProblemAlert(error);\n      }\n    };\n    getData(movieId);\n  }, [movieId]);\n\n  const {\n    poster_path,\n    original_title,\n    release_date,\n    vote_average,\n    overview,\n    genres,\n  } = movie;\n\n  if (movie.length === 0) return;\n\n  const imgUrl = poster_path ? `${IMAGE_BASE_URL}/${poster_path}` : NO_IMAGE;\n\n  return (\n    <>\n      <Link to={backRef.current ?? '/home'}>go back</Link>\n      <MovieWrapper>\n        {' '}\n        <img src={imgUrl} alt={original_title}></img>\n        <MovieInfo>\n          {' '}\n          <h1>\n            {original_title} ({release_date.substr(0, 4)})\n          </h1>\n          <h2>Rating {vote_average}</h2>\n          <h2>Overview</h2>\n          <p>{overview}</p>\n          <h2>Genres</h2>\n          <Ul>\n            {genres.map(({ name }) => {\n              return <Li key={name}>{name}</Li>;\n            })}\n          </Ul>\n        </MovieInfo>\n      </MovieWrapper>\n      <ul>\n        <li>\n          <Link to=\"cast\">Cast</Link>\n        </li>\n        <li>\n          <Link to=\"reviews\">Reviews</Link>\n        </li>\n      </ul>\n      <Outlet />\n    </>\n  );\n};\n\nexport default MovieDetails;\n","import Notiflix from 'notiflix';\n\nfunction ifSomeProblemAlert(error) {\n  Notiflix.Notify.failure(`${error.message}Something going wrong `);\n}\n\nexport { ifSomeProblemAlert };\n"],"names":["MovieWrapper","styled","MovieInfo","Li","Ul","useState","movie","setMovie","movieId","useParams","location","useLocation","backRef","useRef","state","from","useEffect","getData","id","getMovieById","data","error","Notiflix","message","poster_path","original_title","release_date","vote_average","overview","genres","length","imgUrl","to","current","src","alt","substr","map","name"],"sourceRoot":""}